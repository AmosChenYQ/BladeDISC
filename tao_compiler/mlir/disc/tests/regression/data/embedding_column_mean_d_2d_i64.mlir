module attributes {tf.versions = {bad_consumers = [], min_consumer = 0 : i32, producer = 561 : i32}} {
  func.func @main(%arg0: tensor<?x?xi64>) -> tensor<*xf32> attributes {tf.entry_function = {inputs = "{{INPUTS}}", outputs = "{{OUTPUTS}}", input_placements="{{INPUT_PLACEMENTS}}", output_placements="{{OUTPUT_PLACEMENTS}}"}} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Const"() {device = "", value = dense<0> : tensor<i64>} : () -> tensor<i64>
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<-1> : tensor<1xi32>} : () -> tensor<1xi32>
      %outputs_2, %control_3 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[-1, 1]> : tensor<2xi32>} : () -> tensor<2xi32>
      %outputs_4, %control_5 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<0> : tensor<1xi32>} : () -> tensor<1xi32>
      %outputs_6, %control_7 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<1> : tensor<1xi32>} : () -> tensor<1xi32>
      %outputs_8, %control_9 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<0> : tensor<i32>} : () -> tensor<i32>
      %outputs_10, %control_11 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<0> : tensor<2xi32>} : () -> tensor<2xi32>
      %outputs_12, %control_13 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[0, 1]> : tensor<2xi32>} : () -> tensor<2xi32>
      %outputs_14, %control_15 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<1> : tensor<2xi32>} : () -> tensor<2xi32>
      %outputs_16, %control_17 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<1> : tensor<i32>} : () -> tensor<i32>
      %outputs_18, %control_19 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<2> : tensor<1xi32>} : () -> tensor<1xi32>
      %outputs_20, %control_21 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<"0xtensor<10x32xf32>} : () -> tensor<10x32xf32>
      %outputs_22, %control_23 = tf_executor.island wraps "tf.Shape"(%arg0) {device = ""} : (tensor<?x?xi64>) -> tensor<*xi64>
      %outputs_24, %control_25 = tf_executor.island wraps "tf.Cast"(%outputs_22) {Truncate = false, device = ""} : (tensor<*xi64>) -> tensor<*xi32>
      %outputs_26, %control_27 = tf_executor.island wraps "tf.Slice"(%outputs_24, %outputs_4, %outputs_6) {device = ""} : (tensor<*xi32>, tensor<1xi32>, tensor<1xi32>) -> tensor<*xi32>
      %outputs_28, %control_29 = tf_executor.island wraps "tf.GatherV2"(%outputs_22, %outputs_16, %outputs_8) {batch_dims = 0 : i64, device = ""} : (tensor<*xi64>, tensor<i32>, tensor<i32>) -> tensor<*xi64>
      %outputs_30, %control_31 = tf_executor.island wraps "tf.Slice"(%outputs_22, %outputs_4, %outputs_6) {device = ""} : (tensor<*xi64>, tensor<1xi32>, tensor<1xi32>) -> tensor<*xi64>
      %outputs_32, %control_33 = tf_executor.island wraps "tf.Prod"(%outputs_30, %outputs_4) {device = "", keep_dims = false} : (tensor<*xi64>, tensor<1xi32>) -> tensor<*xi64>
      %outputs_34, %control_35 = tf_executor.island wraps "tf.Pack"(%outputs_32, %outputs_28) {axis = 0 : i64, device = ""} : (tensor<*xi64>, tensor<*xi64>) -> tensor<*xi64>
      %outputs_36, %control_37 = tf_executor.island wraps "tf.ZerosLike"(%arg0) {device = ""} : (tensor<?x?xi64>) -> tensor<*xi64>
      %outputs_38, %control_39 = tf_executor.island wraps "tf.NotEqual"(%outputs_36, %arg0) {device = "", incompatible_shape_error = true} : (tensor<*xi64>, tensor<?x?xi64>) -> tensor<*xi1>
      %outputs_40, %control_41 = tf_executor.island wraps "tf.Where"(%outputs_38) {device = ""} : (tensor<*xi1>) -> tensor<*xi64>
      %outputs_42, %control_43 = tf_executor.island wraps "tf.GatherNd"(%arg0, %outputs_40) {device = ""} : (tensor<?x?xi64>, tensor<*xi64>) -> tensor<*xi64>
      %outputs_44, %control_45 = tf_executor.island wraps "tf.GreaterEqual"(%outputs_42, %outputs) {device = ""} : (tensor<*xi64>, tensor<i64>) -> tensor<*xi1>
      %outputs_46, %control_47 = tf_executor.island wraps "tf.Where"(%outputs_44) {device = ""} : (tensor<*xi1>) -> tensor<*xi64>
      %outputs_48, %control_49 = tf_executor.island wraps "tf.Reshape"(%outputs_46, %outputs_0) {device = ""} : (tensor<*xi64>, tensor<1xi32>) -> tensor<*xi64>
      %outputs_50, %control_51 = tf_executor.island wraps "tf.GatherV2"(%outputs_42, %outputs_48, %outputs_8) {batch_dims = 0 : i64, device = ""} : (tensor<*xi64>, tensor<*xi64>, tensor<i32>) -> tensor<*xi64>
      %outputs_52:2, %control_53 = tf_executor.island wraps "tf.SparseReshape"(%outputs_40, %outputs_22, %outputs_34) {device = ""} : (tensor<*xi64>, tensor<*xi64>, tensor<*xi64>) -> (tensor<*xi64>, tensor<*xi64>)
      %outputs_54, %control_55 = tf_executor.island wraps "tf.GatherV2"(%outputs_52#0, %outputs_48, %outputs_8) {batch_dims = 0 : i64, device = ""} : (tensor<*xi64>, tensor<*xi64>, tensor<i32>) -> tensor<*xi64>
      %outputs_56:4, %control_57 = tf_executor.island wraps "tf.SparseFillEmptyRows"(%outputs_54, %outputs_50, %outputs_52#1, %outputs) {device = ""} : (tensor<*xi64>, tensor<*xi64>, tensor<*xi64>, tensor<i64>) -> (tensor<*xi64>, tensor<*xi64>, tensor<*xi1>, tensor<*xi64>)
      %outputs_58, %control_59 = tf_executor.island wraps "tf.Reshape"(%outputs_56#2, %outputs_2) {device = ""} : (tensor<*xi1>, tensor<2xi32>) -> tensor<*xi1>
      %outputs_60, %control_61 = tf_executor.island wraps "tf.StridedSlice"(%outputs_56#0, %outputs_10, %outputs_12, %outputs_14) {begin_mask = 1 : i64, device = "", ellipsis_mask = 0 : i64, end_mask = 1 : i64, new_axis_mask = 0 : i64, shrink_axis_mask = 2 : i64} : (tensor<*xi64>, tensor<2xi32>, tensor<2xi32>, tensor<2xi32>) -> tensor<*xi64>
      %outputs_62, %control_63 = tf_executor.island wraps "tf.SparseSegmentMean"(%outputs_20, %outputs_56#1, %outputs_60) {device = ""} : (tensor<10x32xf32>, tensor<*xi64>, tensor<*xi64>) -> tensor<*xf32>
      %outputs_64, %control_65 = tf_executor.island wraps "tf.Shape"(%outputs_62) {device = ""} : (tensor<*xf32>) -> tensor<*xi32>
      %outputs_66, %control_67 = tf_executor.island wraps "tf.StridedSlice"(%outputs_64, %outputs_6, %outputs_18, %outputs_6) {begin_mask = 0 : i64, device = "", ellipsis_mask = 0 : i64, end_mask = 0 : i64, new_axis_mask = 0 : i64, shrink_axis_mask = 1 : i64} : (tensor<*xi32>, tensor<1xi32>, tensor<1xi32>, tensor<1xi32>) -> tensor<*xi32>
      %outputs_68, %control_69 = tf_executor.island wraps "tf.Pack"(%outputs_16, %outputs_66) {axis = 0 : i64, device = ""} : (tensor<i32>, tensor<*xi32>) -> tensor<*xi32>
      %outputs_70, %control_71 = tf_executor.island wraps "tf.Tile"(%outputs_58, %outputs_68) {device = ""} : (tensor<*xi1>, tensor<*xi32>) -> tensor<*xi1>
      %outputs_72, %control_73 = tf_executor.island wraps "tf.ZerosLike"(%outputs_62) {device = ""} : (tensor<*xf32>) -> tensor<*xf32>
      %outputs_74, %control_75 = tf_executor.island wraps "tf.Select"(%outputs_70, %outputs_72, %outputs_62) {device = ""} : (tensor<*xi1>, tensor<*xf32>, tensor<*xf32>) -> tensor<*xf32>
      %outputs_76, %control_77 = tf_executor.island wraps "tf.Shape"(%outputs_74) {device = ""} : (tensor<*xf32>) -> tensor<*xi32>
      %outputs_78, %control_79 = tf_executor.island wraps "tf.Slice"(%outputs_76, %outputs_6, %outputs_0) {device = ""} : (tensor<*xi32>, tensor<1xi32>, tensor<1xi32>) -> tensor<*xi32>
      %outputs_80, %control_81 = tf_executor.island wraps "tf.ConcatV2"(%outputs_26, %outputs_78, %outputs_8) {device = ""} : (tensor<*xi32>, tensor<*xi32>, tensor<i32>) -> tensor<*xi32>
      %outputs_82, %control_83 = tf_executor.island wraps "tf.Reshape"(%outputs_74, %outputs_80) {device = ""} : (tensor<*xf32>, tensor<*xi32>) -> tensor<*xf32>
      %outputs_84, %control_85 = tf_executor.island wraps "tf.Abs"(%outputs_82) {device = ""} : (tensor<*xf32>) -> tensor<*xf32>
      %outputs_86, %control_87 = tf_executor.island wraps "tf.Add"(%outputs_82, %outputs_84) {device = ""} : (tensor<*xf32>, tensor<*xf32>) -> tensor<*xf32>
      tf_executor.fetch %outputs_86 : tensor<*xf32>
    }
    return %0 : tensor<*xf32>
  }
}
